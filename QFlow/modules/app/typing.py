from ...core import QWidget, QStackedWidget, QMainWindow, QIcon
from typing import Protocol
from typing import Dict, List, Callable

class AppTyping(Protocol):
    """
    # Includes self-typing of QFlow App.
    """
    title: str
    windowGeometry: List
    icon: Callable[[], QIcon]
    screenHistory: List[str]
    stackedScreens: QStackedWidget
    screens: Dict[str, QWidget]
    windows: Dict[str, QMainWindow]
    strictClosingWindows: bool

    # For complete typing
    name: str
    "This property is only available in windows"

    def setScreen(self, screen: QWidget) -> None: ...
    def addScreen(self, screen: QWidget) -> None: ...
    def removeWindow(self, name) -> None: ...
    def setWindow(self, name: str) -> None: ...
    def createWindow(self, window: QMainWindow) -> None: ...
    def onWindowClose(self, event, name): ...
    def closeWindow(self, name) -> None: ...
    def goBack(self) -> None: ...
    def reloadWindowScreens(self, windowName: str) -> None: ...
    def reloadWindowScreen(self, window: str, screen: str) -> None: ...
    def reloadScreens(self) -> None: ...
    def reloadScreen(self, name: str) -> None: ...
    def existScreen(self, name: str) -> bool: ...
    def onAppClose(self, event) -> None: ...
    def removeWindow(self, name) -> None: ...
    def existWindow(self, name: str) -> bool: ...
    def __effect__(self) -> None: ...
    
class App(QMainWindow):
    """
    # All attributes and methods can be used directly from self. This class is intended for typing using typ only.

    Attributes:
        typ (MainWindowTyping): A type-casted version of self for use in autocompletion tools.
    
    Inherited class of PyQt5 QMainWindow used for typing.

    Not required, recommended use only for developers with good knowledge of the package.
    """
    @property
    def typ(self) -> AppTyping:
        """
        Property to access the class typing.
        """
        return self